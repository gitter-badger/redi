<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<config>
    <!-- The DirectoryFactory to use for indexes.

     solr.StandardDirectoryFactory is filesystem
     based and tries to pick the best implementation for the current
     JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
     wraps solr.StandardDirectoryFactory and caches small files in memory
     for better NRT performance.

     One can force a particular implementation via solr.MMapDirectoryFactory,
     solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

     solr.RAMDirectoryFactory is memory based, not
     persistent, and doesn't work with replication.
  -->
    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

    <!-- The CodecFactory for defining the format of the inverted index.
         The default implementation is SchemaCodecFactory, which is the official Lucene
         index format, but hooks into the schema to provide per-field customization of
         the postings lists and per-document values in the fieldType element
         (postingsFormat/docValuesFormat). Note that most of the alternative implementations
         are experimental, so if you choose to customize the index format, its a good
         idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
         before upgrading to a newer version to avoid unnecessary reindexing.
    -->
    <codecFactory class="solr.SchemaCodecFactory"/>

    <!-- To enable dynamic schema REST APIs, use the following for <schemaFactory>:

         <schemaFactory class="ManagedIndexSchemaFactory">
           <bool name="mutable">true</bool>
           <str name="managedSchemaResourceName">managed-schema</str>
         </schemaFactory>

         When ManagedIndexSchemaFactory is specified, Solr will load the schema from
         he resource named in 'managedSchemaResourceName', rather than from schema.xml.
         Note that the managed schema resource CANNOT be named schema.xml.  If the managed
         schema does not exist, Solr will create it after reading schema.xml, then rename
         'schema.xml' to 'schema.xml.bak'.

         Do NOT hand edit the managed schema - external modifications will be ignored and
         overwritten as a result of schema modification REST API calls.

         When ManagedIndexSchemaFactory is specified with mutable = true, schema
         modification REST API calls will be allowed; otherwise, error responses will be
         sent back for these requests.
    -->
    <schemaFactory class="ClassicIndexSchemaFactory"/>


    <!-- Set this to 'false' if you want solr to continue working after it has
      encountered an severe configuration error.  In a production environment,
      you may want solr to keep working even if one handler is mis-configured.

      You may also set this to false using by setting the system property:
        -Dsolr.abortOnConfigurationError=false
    -->
    <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

    <!-- Controls what version of Lucene various components of Solr
         adhere to.  Generally, you want to use the latest version to
         get all bug fixes and improvements. It is highly recommended
         that you fully re-index after changing this setting as it can
         affect both how text is indexed and queried.
      -->
    <luceneMatchVersion>LUCENE_43</luceneMatchVersion>
    <!-- Used to specify an alternate directory to hold all index data
         other than the default ./data under the Solr home.
         If replication is in use, this should match the replication configuration. -->
    <!-- <dataDir>${solr.data.dir:./solr/data}</dataDir>-->

    <indexConfig>
        <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a 
             LimitTokenCountFilterFactory in your fieldType definition. E.g. 
         <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
        -->
        <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
        <!-- <writeLockTimeout>1000</writeLockTimeout>  -->
    
        <!-- Expert: Enabling compound file will use less files for the index, 
             using fewer file descriptors on the expense of performance decrease. 
             Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
        <useCompoundFile>false</useCompoundFile>
    
        <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
             indexing for buffering added documents and deletions before they are
             flushed to the Directory.
             maxBufferedDocs sets a limit on the number of documents buffered
             before flushing.
             If both ramBufferSizeMB and maxBufferedDocs is set, then
             Lucene will flush based on whichever limit is hit first.  -->
        <ramBufferSizeMB>128</ramBufferSizeMB>
        <maxBufferedDocs>1000</maxBufferedDocs>
    
        <!-- Expert: Merge Policy 
             The Merge Policy in Lucene controls how merging of segments is done.
             The default since Solr/Lucene 3.3 is TieredMergePolicy.
             The default since Lucene 2.3 was the LogByteSizeMergePolicy,
             Even older versions of Lucene used LogDocMergePolicy.
          -->
            <mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
              <int name="maxMergeAtOnce">10</int>
              <int name="segmentsPerTier">10</int>
            </mergePolicy>
           
        <!-- Merge Factor
             The merge factor controls how many segments will get merged at a time.
             For TieredMergePolicy, mergeFactor is a convenience parameter which
             will set both MaxMergeAtOnce and SegmentsPerTier at once.
             For LogByteSizeMergePolicy, mergeFactor decides how many new segments
             will be allowed before they are merged into one.
             Default is 10 for both merge policies.
          -->
        <mergeFactor>10</mergeFactor>
    
        <!-- Expert: Merge Scheduler
             The Merge Scheduler in Lucene controls how merges are
             performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
             can perform merges in the background using separate threads.
             The SerialMergeScheduler (Lucene 2.2 default) does not.
         -->
        <!-- 
           <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
           -->
    
        <!-- LockFactory 
    
             This option specifies which Lucene LockFactory implementation
             to use.
          
             single = SingleInstanceLockFactory - suggested for a
                      read-only index or when there is no possibility of
                      another process trying to modify the index.
             native = NativeFSLockFactory - uses OS native file locking.
                      Do not use when multiple solr webapps in the same
                      JVM are attempting to share a single index.
             simple = SimpleFSLockFactory  - uses a plain file for locking
    
             Defaults: 'native' is default for Solr3.6 and later, otherwise
                       'simple' is the default
    
             More details on the nuances of each LockFactory...
             http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <lockType>native</lockType>
    
        <!-- Unlock On Startup
    
             If true, unlock any held write or commit locks on startup.
             This defeats the locking mechanism that allows multiple
             processes to safely access a lucene index, and should be used
             with care. Default is "false".
    
             This is not needed if lock type is 'none' or 'single'
         -->
        <unlockOnStartup>true</unlockOnStartup>
        
        <!-- Expert: Controls how often Lucene loads terms into memory
             Default is 128 and is likely good for most everyone.
          -->
        <!-- <termIndexInterval>128</termIndexInterval> -->
    
        <!-- If true, IndexReaders will be reopened (often more efficient)
             instead of closed and then opened. Default: true
          -->
        <!-- 
        <reopenReaders>true</reopenReaders>
          -->
    
        <!-- Commit Deletion Policy
    
             Custom deletion policies can be specified here. The class must
             implement org.apache.lucene.index.IndexDeletionPolicy.
    
             http://lucene.apache.org/java/3_5_0/api/core/org/apache/lucene/index/IndexDeletionPolicy.html
    
             The default Solr IndexDeletionPolicy implementation supports
             deleting index commit points on number of commits, age of
             commit point and optimized status.
             
             The latest commit point should always be preserved regardless
             of the criteria.
        -->
        <!-- 
        <deletionPolicy class="solr.SolrDeletionPolicy">
        -->
          <!-- The number of commit points to be kept -->
          <!-- <str name="maxCommitsToKeep">1</str> -->
          <!-- The number of optimized commit points to be kept -->
          <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
          <!--
              Delete all commit points once they have reached the given age.
              Supports DateMathParser syntax e.g.
            -->
          <!--
             <str name="maxCommitAge">30MINUTES</str>
             <str name="maxCommitAge">1DAY</str>
          -->
        <!-- 
        </deletionPolicy>
        -->
    
        <!-- Lucene Infostream
           
             To aid in advanced debugging, Lucene provides an "InfoStream"
             of detailed information when indexing.
    
             Setting The value to true will instruct the underlying Lucene
             IndexWriter to write its debugging info the specified file
          -->
         <!-- <infoStream file="INFOSTREAM.txt">false</infoStream> --> 
    </indexConfig>

    <!--	Enables JMX if and only if an existing MBeanServer is found, use
            this if you want to configure JMX through JVM parameters. Remove
            this to disable exposing Solr configuration and statistics to JMX.

          If you want to connect to a particular server, specify the agentId
          e.g. <jmx agentId="myAgent" />

          If you want to start a new MBeanServer, specify the serviceUrl
          e.g <jmx serviceurl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr" />

          For more details see http://wiki.apache.org/solr/SolrJmx
    -->
    <!--
    <jmx />
    -->

    <!-- the default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- Enables a transaction log, used for real-time get, durability, and
              and solr cloud replica recovery.  The log can grow as big as
              uncommitted changes to the index, so use of a hard autoCommit
              is recommended (see below).
              "dir" - the target directory for transaction logs, defaults to the
                     solr data directory.  -->
        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

        <!-- AutoCommit

             Perform a hard commit automatically under certain conditions.
             Instead of enabling autoCommit, consider using "commitWithin"
             when adding documents.

             http://wiki.apache.org/solr/UpdateXmlMessages

             maxDocs - Maximum number of documents to add since the last
                       commit before automatically triggering a new commit.

             maxTime - Maximum amount of time in ms that is allowed to pass
                       since a document was added before automatically
                       triggering a new commit.
             openSearcher - if false, the commit causes recent index changes
               to be flushed to stable storage, but does not cause a new
               searcher to be opened to make those changes visible.

             If the updateLog is enabled, then it's highly recommended to
             have some sort of hard autoCommit to limit the log size.
          -->
        <autoCommit>
            <maxTime>60000</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>

        <!-- softAutoCommit is like autoCommit except it causes a
             'soft' commit which only ensures that changes are visible
             but does not ensure that data is synced to disk.  This is
             faster and more near-realtime friendly than a hard commit.
          -->
        <autoSoftCommit>
            <maxTime>1000</maxTime>
        </autoSoftCommit>

        <!-- Update Related Event Listeners

             Various IndexWriter related events can trigger Listeners to
             take actions.

             postCommit - fired after every commit or optimize command
             postOptimize - fired after every optimize command
          -->
        <!-- The RunExecutableListener executes an external command from a
             hook such as postCommit or postOptimize.

             exe - the name of the executable to run
             dir - dir to use as the current working directory. (default=".")
             wait - the calling thread waits until the executable returns.
                    (default="true")
             args - the arguments to pass to the program.  (default is none)
             env - environment variables to set.  (default is none)
          -->
        <!-- This example shows how RunExecutableListener could be used
             with the script based replication...
             http://wiki.apache.org/solr/CollectionDistribution
          -->
        <!--
           <listener event="postCommit" class="solr.RunExecutableListener">
             <str name="exe">solr/bin/snapshooter</str>
             <str name="dir">.</str>
             <bool name="wait">true</bool>
             <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
             <arr name="env"> <str>MYVAR=val1</str> </arr>
           </listener>
          -->

    </updateHandler>


    <query>
        <!-- Max Boolean Clauses

             Maximum number of clauses in each BooleanQuery,  an exception
             is thrown if exceeded.

             ** WARNING **

             This option actually modifies a global Lucene property that
             will affect all SolrCores.  If multiple solrconfig.xml files
             disagree on this property, the value at any given moment will
             be based on the last SolrCore to be initialized.

          -->
        <maxBooleanClauses>1024</maxBooleanClauses>


        <!-- Solr Internal Query Caches

             There are two implementations of cache available for Solr,
             LRUCache, based on a synchronized LinkedHashMap, and
             FastLRUCache, based on a ConcurrentHashMap.

             FastLRUCache has faster gets and slower puts in single
             threaded operation and thus is generally faster than LRUCache
             when the hit ratio of the cache is high (> 75%), and may be
             faster under other scenarios on multi-cpu systems.
        -->

        <!-- Filter Cache

             Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.  When a
             new searcher is opened, its caches may be prepopulated or
             "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For
             LRUCache, the autowarmed items will be the most recently
             accessed items.

             Parameters:
               class - the SolrCache implementation LRUCache or
                   (LRUCache or FastLRUCache)
               size - the maximum number of entries in the cache
               initialSize - the initial capacity (number of entries) of
                   the cache.  (see java.util.HashMap)
               autowarmCount - the number of entries to prepopulate from
                   and old cache.
          -->
        <filterCache class="solr.FastLRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="128"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
          -->
        <queryResultCache class="solr.LRUCache"
                          size="512"
                          initialSize="512"
                          autowarmCount="128"/>

        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
          -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="128"/>

        <!-- Field Value Cache

             Cache used to hold field values that are quickly accessible
             by document id.  The fieldValueCache is created by default
             even if not configured here.
          -->
           <fieldValueCache class="solr.FastLRUCache"
                            size="512"
                            autowarmCount="128"
                            showItems="32" />

        <!-- Custom Cache

             Example of a generic cache.  These caches may be accessed by
             name through SolrIndexSearcher.getCache(),cacheLookup(), and
             cacheInsert().  The purpose is to enable easy caching of
             user/application level data.  The regenerator argument should
             be specified as an implementation of solr.CacheRegenerator
             if autowarming is desired.
          -->
        <!--
           <cache name="myUserCache"
                  class="solr.LRUCache"
                  size="4096"
                  initialSize="1024"
                  autowarmCount="1024"
                  regenerator="com.mycompany.MyRegenerator"
                  />
          -->


        <!-- Lazy Field Loading

            If true, stored fields that are not requested will be loaded
            lazily.  This can result in a significant speed improvement
            if the usual case is to not load all stored fields,
            especially if the skipped fields are large compressed text
            fields.
       -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Use Filter For Sorted Query

             A possible optimization that attempts to use a filter to
             satisfy a search.  If the requested sort does not include
             score, then the filterCache will be checked for a filter
             matching the query. If found, the filter will be used as the
             source of document ids, and then the sort will be applied to
             that.

             For most situations, this will not be useful unless you
             frequently get the same search repeatedly with different sort
             options, and none of them ever use "score"
          -->
        <!--
           <useFilterForSortedQuery>true</useFilterForSortedQuery>
          -->

        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 49 will be collected and cached.  Any further
             requests in that range can be satisfied via the cache.
          -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>


        <!-- Query Related Event Listeners

             Various IndexSearcher related events can trigger Listeners to
             take actions.

             newSearcher - fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka
             registered).  It can be used to prime certain caches to
             prevent long request times for certain requests.

             firstSearcher - fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain autowarming data from.


          -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence.
          -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                   <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                   <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                  -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
          -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Max Warming Searchers

             Maximum number of searchers that may be warming in the
             background concurrently.  An error is returned if this limit
             is exceeded.

             Recommend values of 1-2 for read-only slaves, higher for
             masters w/o cache warming.
          -->
        <maxWarmingSearchers>10</maxWarmingSearchers>
    </query>

    <!--
    Let the dispatch filter handler /select?qt=XXX
    handleSelect=true will use consistent error handling for /select and /update
    handleSelect=false will use solr1.1 style error formatting
    -->
    <requestDispatcher handleSelect="true" >
        <!--Make sure your system has some authentication before enabling remote streaming!  -->
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" />

        <!-- Set HTTP caching related parameters (for proxy caches and clients).

             To get the behaviour of Solr 1.2 (ie: no caching related headers)
             use the never304="true" option and do not specify a value for
             <cacheControl>
        -->
        <!-- <httpCaching never304="true"> -->
        <httpCaching lastModifiedFrom="openTime"
                     etagSeed="Solr">
            <!-- lastModFrom="openTime" is the default, the Last-Modified value
                 (and validation against If-Modified-Since requests) will all be
                 relative to when the current Searcher was opened.
                 You can change it to lastModFrom="dirLastMod" if you want the
                 value to exactly corrispond to when the physical index was last
                 modified.

                 etagSeed="..." is an option you can change to force the ETag
                 header (and validation against If-None-Match requests) to be
                 differnet even if the index has not changed (ie: when making
                 significant changes to your config file)

                 lastModifiedFrom and etagSeed are both ignored if you use the
                 never304="true" option.
            -->
            <!-- If you include a <cacheControl> directive, it will be used to
                 generate a Cache-Control header, as well as an Expires header
                 if the value contains "max-age="

                 By default, no Cache-Control header is generated.

                 You can use the <cacheControl> option even if you have set
                 never304="true"
            -->
            <!-- <cacheControl>max-age=30, public</cacheControl> -->
        </httpCaching>
    </requestDispatcher>


    <!-- requestHandler plugins... incoming queries will be dispatched to the
       correct handler based on the path or the qt (query type) param.
       Names starting with a '/' are accessed with the a path equal to the
       registered name.  Names without a leading '/' are accessed with:
        http://host/app/select?qt=name
       If no qt is defined, the requestHandler that declares default="true"
       will be used.
    -->
    <requestHandler name="standard" class="solr.SearchHandler" default="true">
        <!-- default values for query parameters -->
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <!--
           <int name="rows">10</int>
           <str name="fl">*</str>
           <str name="version">2.1</str>
            -->
            <!-- clustering -->
            <bool name="clustering.results">true</bool>
            <bool name="carrot.produceSummary">true</bool>
        </lst>
        <lst name="invariants">
           <!-- Do not allow collection clustering as it is very load intensive -->
           <bool name="clustering.collection">false</bool>
        </lst>
        <arr name="last-components">
            <str>clustering</str>
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <requestHandler name="/suggest" class="at.newmedialab.lmf.util.solr.SuggestionRequestHandler">
        <lst name="defaults">
            <str name="suggestion.df">lmf.spellcheck</str>
        </lst>
        <arr name="first-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <!-- DisMaxRequestHandler allows easy searching across multiple fields
        for simple user-entered phrases.  It's implementation is now
        just the standard SearchHandler with a default query type
        of "dismax".
        see http://wiki.apache.org/solr/DisMaxRequestHandler
    -->
    <requestHandler name="dismax" class="solr.SearchHandler" >
        <lst name="defaults">
            <str name="defType">dismax</str>
            <str name="echoParams">explicit</str>
            <float name="tie">0.01</float>
            <str name="qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
            </str>
            <str name="pf">
                text^0.2 features^1.1 name^1.5 manu^1.4 manu_exact^1.9
            </str>
            <str name="bf">
                ord(popularity)^0.5 recip(rord(price),1,1000,1000)^0.3
            </str>
            <str name="fl">
                id,name,price,score
            </str>
            <str name="mm">
                2&lt;-1 5&lt;-2 6&lt;90%
            </str>
            <int name="ps">100</int>
            <str name="q.alt">*:*</str>
            <!-- example highlighter config, enable per-query with hl=true -->
            <str name="hl.fl">text features name</str>
            <!-- for this field, we want no fragmenting, just highlighting -->
            <str name="f.name.hl.fragsize">0</str>
            <!-- instructs Solr to return the field itself if no query terms are
           found -->
            <str name="f.name.hl.alternateField">name</str>
            <str name="f.text.hl.fragmenter">regex</str> <!-- defined below -->

            <!-- clustering -->
            <bool name="clustering.results">true</bool>
            <bool name="carrot.produceSummary">true</bool>
        </lst>
        <lst name="invariants">
           <!-- Do not allow collection clustering as it is very load intensive -->
           <bool name="clustering.collection">false</bool>
        </lst>
        <arr name="last-components">
            <str>clustering</str>
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <!-- Note how you can register the same handler multiple times with
       different names (and different init parameters)
    -->


    <!--
     Search components are registered to SolrCoreRuntime and used by Search Handlers

     By default, the following components are avaliable:

     <searchComponent name="query"     class="org.apache.solr.handler.component.QueryComponent" />
     <searchComponent name="facet"     class="org.apache.solr.handler.component.FacetComponent" />
     <searchComponent name="mlt"       class="org.apache.solr.handler.component.MoreLikeThisComponent" />
     <searchComponent name="highlight" class="org.apache.solr.handler.component.HighlightComponent" />
     <searchComponent name="debug"     class="org.apache.solr.handler.component.DebugComponent" />

     Default configuration in a requestHandler would look like:
      <arr name="components">
        <str>query</str>
        <str>facet</str>
        <str>mlt</str>
        <str>highlight</str>
        <str>debug</str>
      </arr>

      If you register a searchComponent to one of the standard names, that will be used instead.
      To insert handlers before or after the 'standard' components, use:

      <arr name="first-components">
        <str>myFirstComponentName</str>
      </arr>

      <arr name="last-components">
        <str>myLastComponentName</str>
      </arr>
    -->

    <!-- a search component that enables you to configure the top results for
a given query regardless of the normal lucene scoring.-->
    <searchComponent name="elevator" class="solr.QueryElevationComponent" >
        <!-- pick a fieldType to analyze queries -->
        <str name="queryFieldType">string</str>
        <str name="config-file">elevate.xml</str>
    </searchComponent>

    <!-- a request handler utilizing the elevator component -->
    <requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
        </lst>
        <arr name="last-components">
            <str>elevator</str>
        </arr>
    </requestHandler>

    <requestHandler name="/mlt" class="org.apache.solr.handler.MoreLikeThisHandler">
        <lst name="defaults">
            <str name="mlt.interestingTerms">list</str>
        </lst>
    </requestHandler>


    <!-- Update request handler.
  
       Note: Since solr1.1 requestHandlers requires a valid content type header if posted in 
       the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
       The response format differs from solr1.1 formatting and returns a standard error code.
       
       To enable solr1.1 behavior, remove the /update handler or change its path
    -->
    <requestHandler name="/update" class="solr.UpdateRequestHandler" />

    <!--
    Analysis request handler.  
    With 4.2, the analysis handler was split into FieldAnalysisRH and DocumentAnalysisRH
    -->
    <requestHandler name="/analysis/field" 
                    startup="lazy"
                    class="solr.FieldAnalysisRequestHandler" />
    <requestHandler name="/analysis/document" 
                    startup="lazy"
                    class="solr.DocumentAnalysisRequestHandler" /> 
    

    <!-- Binary Update Request Handler
         http://wiki.apache.org/solr/javabin
      -->
    <requestHandler name="/update/javabin" class="solr.UpdateRequestHandler" />

    <!-- CSV update handler, loaded on demand -->
    <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />

    <!-- JSON Update Request Handler
         http://wiki.apache.org/solr/UpdateJSON
      -->
    <requestHandler name="/update/json" class="solr.JsonUpdateRequestHandler" startup="lazy" />


    <!--
     Admin Handlers - This will register all the standard admin RequestHandlers.  Adding
     this single handler is equivolent to registering:

    <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
    <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
    <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
    <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
    <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
    <requestHandler name="/admin/file"       class="org.apache.solr.handler.admin.ShowFileRequestHandler" >

    If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
    <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
      <lst name="invariants">
       <str name="hidden">synonyms.txt</str>
       <str name="hidden">anotherfile.txt</str>
      </lst>
    </requestHandler>
    -->
    <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="PingRequestHandler">
        <lst name="defaults">
            <str name="qt">standard</str>
            <str name="q">solrpingquery</str>
            <str name="echoParams">all</str>
        </lst>
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
        <lst name="defaults">
            <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- Highlighting Component

         http://wiki.apache.org/solr/HighlightingParameters
      -->
    <searchComponent class="solr.HighlightComponent" name="highlight">
      <highlighting>
        <!-- Configure the standard fragmenter -->
        <!-- This could most likely be commented out in the "default" case -->
        <fragmenter name="gap"
                    default="true"
                    class="solr.highlight.GapFragmenter">
          <lst name="defaults">
            <int name="hl.fragsize">100</int>
          </lst>
        </fragmenter>

        <!-- A regular-expression-based fragmenter
             (for sentence extraction)
          -->
        <fragmenter name="regex"
                    class="solr.highlight.RegexFragmenter">
          <lst name="defaults">
            <!-- slightly smaller fragsizes work better because of slop -->
            <int name="hl.fragsize">70</int>
            <!-- allow 50% slop on fragment sizes -->
            <float name="hl.regex.slop">0.5</float>
            <!-- a basic sentence pattern -->
            <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
          </lst>
        </fragmenter>

        <!-- Configure the standard formatter -->
        <formatter name="html"
                   default="true"
                   class="solr.highlight.HtmlFormatter">
          <lst name="defaults">
            <str name="hl.simple.pre"><![CDATA[<em>]]></str>
            <str name="hl.simple.post"><![CDATA[</em>]]></str>
          </lst>
        </formatter>

        <!-- Configure the standard encoder -->
        <encoder name="html"
                 class="solr.highlight.HtmlEncoder" />

        <!-- Configure the standard fragListBuilder -->
        <fragListBuilder name="simple"
                         default="true"
                         class="solr.highlight.SimpleFragListBuilder"/>

        <!-- Configure the single fragListBuilder -->
        <fragListBuilder name="single"
                         class="solr.highlight.SingleFragListBuilder"/>

        <!-- default tag FragmentsBuilder -->
        <fragmentsBuilder name="default"
                          default="true"
                          class="solr.highlight.ScoreOrderFragmentsBuilder">
          <!--
          <lst name="defaults">
            <str name="hl.multiValuedSeparatorChar">/</str>
          </lst>
          -->
        </fragmentsBuilder>

        <!-- multi-colored tag FragmentsBuilder -->
        <fragmentsBuilder name="colored"
                          class="solr.highlight.ScoreOrderFragmentsBuilder">
          <lst name="defaults">
            <str name="hl.tag.pre"><![CDATA[
                 <b style="background:yellow">,<b style="background:lawgreen">,
                 <b style="background:aquamarine">,<b style="background:magenta">,
                 <b style="background:palegreen">,<b style="background:coral">,
                 <b style="background:wheat">,<b style="background:khaki">,
                 <b style="background:lime">,<b style="background:deepskyblue">]]></str>
            <str name="hl.tag.post"><![CDATA[</b>]]></str>
          </lst>
        </fragmentsBuilder>

        <boundaryScanner name="default"
                         default="true"
                         class="solr.highlight.SimpleBoundaryScanner">
          <lst name="defaults">
            <str name="hl.bs.maxScan">10</str>
            <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
          </lst>
        </boundaryScanner>

        <boundaryScanner name="breakIterator"
                         class="solr.highlight.BreakIteratorBoundaryScanner">
          <lst name="defaults">
            <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
            <str name="hl.bs.type">WORD</str>
            <!-- language and country are used when constructing Locale object.  -->
            <!-- And the Locale object will be used when getting instance of BreakIterator -->
            <str name="hl.bs.language">en</str>
            <str name="hl.bs.country">US</str>
          </lst>
        </boundaryScanner>
      </highlighting>
    </searchComponent>

    <searchComponent
        class="org.apache.solr.handler.clustering.ClusteringComponent" name="clustering">
      <lst name="engine">
        <str name="name">default</str>
        <str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm</str>
      </lst>
      <lst name="engine">
        <str name="name">lingo</str>
        <str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm</str>
      </lst>
      <lst name="engine">
        <str name="name">stc</str>
        <str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
      </lst>
      <lst name="engine">
        <str name="name">kmeans</str>
        <str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm</str>
      </lst>
	</searchComponent>

    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <str name="queryAnalyzerFieldType">textSpell</str>

        <lst name="spellchecker">
            <str name="name">default</str>
            <str name="field">lmf.spellcheck</str>
            <str name="classname">solr.IndexBasedSpellChecker</str>
            <str name="spellcheckIndexDir">./spellchecker1</str>
            <str name="buildOnCommit">true</str>
        </lst>

    </searchComponent>

    <!-- Response Writers

       http://wiki.apache.org/solr/QueryResponseWriter

       Request responses will be written using the writer specified by
       the 'wt' request parameter matching the name of a registered
       writer.

       The "default" writer is the default and will be used if 'wt' is
       not specified in the request.
    -->
    <!-- The following response writers are implicitly configured unless
         overridden...
      -->
    <!--
       <queryResponseWriter name="xml"
                            default="true"
                            class="solr.XMLResponseWriter" />
       <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
       <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
       <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
       <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
       <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
       <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter"/>
       <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
      -->
    <!--
       Custom response writers can be declared as needed...
      -->
    <!--
       <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
      -->

    <!-- XSLT response writer transforms the XML output by any xslt file found
        in Solr's conf/xslt directory.  Changes to xslt files are checked for
        every xsltCacheLifetimeSeconds.
    -->
    <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
        <int name="xsltCacheLifetimeSeconds">5</int>
    </queryResponseWriter>


    <!-- example of registering a query parser
    <queryParser name="lucene" class="org.apache.solr.search.LuceneQParserPlugin"/>
    -->

    <!-- example of registering a custom function parser
    <valueSourceParser name="myfunc" class="com.mycompany.MyValueSourceParser" />
    -->

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>*:*</defaultQuery>

        <!-- configure a healthcheck file for servers behind a loadbalancer
        <healthcheck type="file">server-enabled</healthcheck>
        -->
    </admin>

</config>
